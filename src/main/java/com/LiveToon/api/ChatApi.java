/*
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.16.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.LiveToon.api;

import com.LiveToon.model.ChatCharacterIdAiPost200Response;
import com.LiveToon.model.ChatCharacterIdAiPostRequest;
import com.LiveToon.model.ChatCharacterIdHistoryGet200Response;
import com.LiveToon.model.ChatCharacterIdSettingsPatch200Response;
import com.LiveToon.model.ChatCharacterIdSettingsPatchRequest;
import com.LiveToon.model.ChatCharacterIdUserPost201Response;
import com.LiveToon.model.ChatCharacterIdUserPostRequest;
import org.springframework.format.annotation.DateTimeFormat;
import com.LiveToon.model.Error;
import org.springframework.lang.Nullable;
import java.time.OffsetDateTime;
import java.util.UUID;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;

import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-09-29T19:10:41.347886+09:00[Asia/Seoul]", comments = "Generator version: 7.16.0")
@Validated
@Tag(name = "Chat", description = "the Chat API")
public interface ChatApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    public static final String PATH_CHAT_CHARACTER_ID_AI_POST = "/chat/{character_id}/ai";
    /**
     * POST /chat/{character_id}/ai : 罹먮┃�� 梨꾪똿 - AI �묐떟
     * 罹먮┃�곗쓽 AI �묐떟�� �앹꽦�섍퀬 諛섑솚�⑸땲��
     *
     * @param characterId 罹먮┃�� ID (required)
     * @param chatCharacterIdAiPostRequest  (required)
     * @return AI �묐떟 �앹꽦 �깃났 (status code 200)
     *         or �섎せ�� �붿껌 (status code 400)
     *         or 罹먮┃�� �먮뒗 ���붾� 李얠쓣 �� �놁쓬 (status code 404)
     *         or �붿껌 �쒕룄 珥덇낵 (status code 429)
     */
    @Operation(
        operationId = "chatCharacterIdAiPost",
        summary = "罹먮┃�� 梨꾪똿 - AI �묐떟",
        description = "罹먮┃�곗쓽 AI �묐떟�� �앹꽦�섍퀬 諛섑솚�⑸땲��",
        tags = { "Chat" },
        responses = {
            @ApiResponse(responseCode = "200", description = "AI �묐떟 �앹꽦 �깃났", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ChatCharacterIdAiPost200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "�섎せ�� �붿껌", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "罹먮┃�� �먮뒗 ���붾� 李얠쓣 �� �놁쓬", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "429", description = "�붿껌 �쒕룄 珥덇낵", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth"),
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = ChatApi.PATH_CHAT_CHARACTER_ID_AI_POST,
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ChatCharacterIdAiPost200Response> chatCharacterIdAiPost(
        @NotNull @Parameter(name = "character_id", description = "罹먮┃�� ID", required = true, in = ParameterIn.PATH) @PathVariable("character_id") UUID characterId,
        @Parameter(name = "ChatCharacterIdAiPostRequest", description = "", required = true) @Valid @RequestBody ChatCharacterIdAiPostRequest chatCharacterIdAiPostRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"response_time\" : 0.8008281904610115, \"character_emotion\" : \"happy\", \"reply\" : { \"role\" : \"user\", \"user_id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"character_id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"content\" : \"content\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"details\" : \"{}\", \"error\" : \"error\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"details\" : \"{}\", \"error\" : \"error\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"details\" : \"{}\", \"error\" : \"error\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_CHAT_CHARACTER_ID_HISTORY_GET = "/chat/{character_id}/history";
    /**
     * GET /chat/{character_id}/history : 罹먮┃�� 梨꾪똿 湲곕줉 議고쉶
     * �뱀젙 罹먮┃�곗��� 梨꾪똿 湲곕줉�� 議고쉶�⑸땲��
     *
     * @param characterId 罹먮┃�� ID (required)
     * @param page �섏씠吏� 踰덊샇 (optional, default to 1)
     * @param limit �섏씠吏��� 硫붿떆吏� �� (optional, default to 50)
     * @param since 議고쉶 �쒖옉 �좎쭨 (ISO 8601) (optional)
     * @return 梨꾪똿 湲곕줉 議고쉶 �깃났 (status code 200)
     *         or 罹먮┃�곕� 李얠쓣 �� �놁쓬 (status code 404)
     */
    @Operation(
        operationId = "chatCharacterIdHistoryGet",
        summary = "罹먮┃�� 梨꾪똿 湲곕줉 議고쉶",
        description = "�뱀젙 罹먮┃�곗��� 梨꾪똿 湲곕줉�� 議고쉶�⑸땲��",
        tags = { "Chat" },
        responses = {
            @ApiResponse(responseCode = "200", description = "梨꾪똿 湲곕줉 議고쉶 �깃났", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ChatCharacterIdHistoryGet200Response.class))
            }),
            @ApiResponse(responseCode = "404", description = "罹먮┃�곕� 李얠쓣 �� �놁쓬", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth"),
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = ChatApi.PATH_CHAT_CHARACTER_ID_HISTORY_GET,
        produces = { "application/json" }
    )
    
    default ResponseEntity<ChatCharacterIdHistoryGet200Response> chatCharacterIdHistoryGet(
        @NotNull @Parameter(name = "character_id", description = "罹먮┃�� ID", required = true, in = ParameterIn.PATH) @PathVariable("character_id") UUID characterId,
        @Min(1) @Parameter(name = "page", description = "�섏씠吏� 踰덊샇", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "1") Integer page,
        @Min(1) @Max(100) @Parameter(name = "limit", description = "�섏씠吏��� 硫붿떆吏� ��", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false, defaultValue = "50") Integer limit,
        @Parameter(name = "since", description = "議고쉶 �쒖옉 �좎쭨 (ISO 8601)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "since", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) @Nullable OffsetDateTime since
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"pagination\" : { \"total\" : 1, \"limit\" : 6, \"page\" : 0, \"total_pages\" : 5 }, \"messages\" : [ { \"role\" : \"user\", \"user_id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"character_id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"content\" : \"content\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"role\" : \"user\", \"user_id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"character_id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"content\" : \"content\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"details\" : \"{}\", \"error\" : \"error\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_CHAT_CHARACTER_ID_SETTINGS_PATCH = "/chat/{character_id}/settings";
    /**
     * PATCH /chat/{character_id}/settings : 罹먮┃�� 梨꾪똿 �ㅼ젙 蹂�寃�
     * �뱀젙 罹먮┃�곗��� 梨꾪똿 �ㅼ젙�� 蹂�寃쏀빀�덈떎
     *
     * @param characterId 罹먮┃�� ID (required)
     * @param chatCharacterIdSettingsPatchRequest  (required)
     * @return 梨꾪똿 �ㅼ젙 �낅뜲�댄듃 �깃났 (status code 200)
     *         or �섎せ�� �붿껌 (status code 400)
     *         or 罹먮┃�곕� 李얠쓣 �� �놁쓬 (status code 404)
     */
    @Operation(
        operationId = "chatCharacterIdSettingsPatch",
        summary = "罹먮┃�� 梨꾪똿 �ㅼ젙 蹂�寃�",
        description = "�뱀젙 罹먮┃�곗��� 梨꾪똿 �ㅼ젙�� 蹂�寃쏀빀�덈떎",
        tags = { "Chat" },
        responses = {
            @ApiResponse(responseCode = "200", description = "梨꾪똿 �ㅼ젙 �낅뜲�댄듃 �깃났", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ChatCharacterIdSettingsPatch200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "�섎せ�� �붿껌", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "罹먮┃�곕� 李얠쓣 �� �놁쓬", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth"),
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = ChatApi.PATH_CHAT_CHARACTER_ID_SETTINGS_PATCH,
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ChatCharacterIdSettingsPatch200Response> chatCharacterIdSettingsPatch(
        @NotNull @Parameter(name = "character_id", description = "罹먮┃�� ID", required = true, in = ParameterIn.PATH) @PathVariable("character_id") UUID characterId,
        @Parameter(name = "ChatCharacterIdSettingsPatchRequest", description = "", required = true) @Valid @RequestBody ChatCharacterIdSettingsPatchRequest chatCharacterIdSettingsPatchRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"settings\" : \"{}\", \"message\" : \"梨꾪똿 �ㅼ젙�� �깃났�곸쑝濡� �낅뜲�댄듃�섏뿀�듬땲��\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"details\" : \"{}\", \"error\" : \"error\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"details\" : \"{}\", \"error\" : \"error\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_CHAT_CHARACTER_ID_USER_POST = "/chat/{character_id}/user";
    /**
     * POST /chat/{character_id}/user : 罹먮┃�� 梨꾪똿 - �좎� �명뭼
     * �뱀젙 罹먮┃�곗��� 梨꾪똿�먯꽌 �ъ슜�� 硫붿떆吏�瑜� �꾩넚�⑸땲��
     *
     * @param characterId 罹먮┃�� ID (required)
     * @param chatCharacterIdUserPostRequest  (required)
     * @return �ъ슜�� 硫붿떆吏� �꾩넚 �깃났 (status code 201)
     *         or �섎せ�� �붿껌 (status code 400)
     *         or 罹먮┃�곕� 李얠쓣 �� �놁쓬 (status code 404)
     */
    @Operation(
        operationId = "chatCharacterIdUserPost",
        summary = "罹먮┃�� 梨꾪똿 - �좎� �명뭼",
        description = "�뱀젙 罹먮┃�곗��� 梨꾪똿�먯꽌 �ъ슜�� 硫붿떆吏�瑜� �꾩넚�⑸땲��",
        tags = { "Chat" },
        responses = {
            @ApiResponse(responseCode = "201", description = "�ъ슜�� 硫붿떆吏� �꾩넚 �깃났", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ChatCharacterIdUserPost201Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "�섎せ�� �붿껌", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "罹먮┃�곕� 李얠쓣 �� �놁쓬", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth"),
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = ChatApi.PATH_CHAT_CHARACTER_ID_USER_POST,
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ChatCharacterIdUserPost201Response> chatCharacterIdUserPost(
        @NotNull @Parameter(name = "character_id", description = "罹먮┃�� ID", required = true, in = ParameterIn.PATH) @PathVariable("character_id") UUID characterId,
        @Parameter(name = "ChatCharacterIdUserPostRequest", description = "", required = true) @Valid @RequestBody ChatCharacterIdUserPostRequest chatCharacterIdUserPostRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"conversation_id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"message\" : { \"role\" : \"user\", \"user_id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"character_id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"content\" : \"content\", \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"details\" : \"{}\", \"error\" : \"error\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"details\" : \"{}\", \"error\" : \"error\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
