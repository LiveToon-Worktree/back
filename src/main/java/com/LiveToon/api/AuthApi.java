/*
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.16.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.LiveToon.api;

import com.LiveToon.model.AuthLoginPost200Response;
import com.LiveToon.model.AuthLoginPostRequest;
import com.LiveToon.model.AuthLogoutPost200Response;
import com.LiveToon.model.AuthSignupPost201Response;
import com.LiveToon.model.AuthSignupPostRequest;
import com.LiveToon.model.Error;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import jakarta.validation.Valid;

import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-09-29T19:10:41.347886+09:00[Asia/Seoul]", comments = "Generator version: 7.16.0")
@Validated
@Tag(name = "Authentication", description = "the Authentication API")
public interface AuthApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    public static final String PATH_AUTH_LOGIN_POST = "/auth/login";
    /**
     * POST /auth/login : 濡쒓렇��
     * �ъ슜�� �몄쬆�� �섑뻾�섍퀬 �≪꽭�� �좏겙�� 諛쒓툒�⑸땲��
     *
     * @param authLoginPostRequest  (required)
     * @return 濡쒓렇�� �깃났 (status code 200)
     *         or �몄쬆 �ㅽ뙣 (�섎せ�� �대찓�� �먮뒗 鍮꾨�踰덊샇) (status code 401)
     *         or �덈Т 留롮� 濡쒓렇�� �쒕룄 (status code 429)
     */
    @Operation(
        operationId = "authLoginPost",
        summary = "濡쒓렇��",
        description = "�ъ슜�� �몄쬆�� �섑뻾�섍퀬 �≪꽭�� �좏겙�� 諛쒓툒�⑸땲��",
        tags = { "Authentication" },
        responses = {
            @ApiResponse(responseCode = "200", description = "濡쒓렇�� �깃났", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AuthLoginPost200Response.class))
            }),
            @ApiResponse(responseCode = "401", description = "�몄쬆 �ㅽ뙣 (�섎せ�� �대찓�� �먮뒗 鍮꾨�踰덊샇)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "429", description = "�덈Т 留롮� 濡쒓렇�� �쒕룄", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = AuthApi.PATH_AUTH_LOGIN_POST,
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<AuthLoginPost200Response> authLoginPost(
        @Parameter(name = "AuthLoginPostRequest", description = "", required = true) @Valid @RequestBody AuthLoginPostRequest authLoginPostRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"refresh_token\" : \"refresh_token\", \"user\" : { \"subscription_tier\" : \"free\", \"is_active\" : true, \"avatar_url\" : \"https://openapi-generator.tech\", \"updated_at\" : \"2000-01-23T04:56:07.000+00:00\", \"nickname\" : \"nickname\", \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"email\" : \"email\", \"username\" : \"username\" }, \"expires_in\" : 0, \"token\" : \"token\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"details\" : \"{}\", \"error\" : \"error\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"details\" : \"{}\", \"error\" : \"error\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_AUTH_LOGOUT_POST = "/auth/logout";
    /**
     * POST /auth/logout : 濡쒓렇�꾩썐
     * �ъ슜�� 濡쒓렇�꾩썐�� �섑뻾�섍퀬 �좏겙�� 臾댄슚�뷀빀�덈떎
     *
     * @return 濡쒓렇�꾩썐 �깃났 (status code 200)
     *         or �몄쬆�섏� �딆� �ъ슜�� (status code 401)
     */
    @Operation(
        operationId = "authLogoutPost",
        summary = "濡쒓렇�꾩썐",
        description = "�ъ슜�� 濡쒓렇�꾩썐�� �섑뻾�섍퀬 �좏겙�� 臾댄슚�뷀빀�덈떎",
        tags = { "Authentication" },
        responses = {
            @ApiResponse(responseCode = "200", description = "濡쒓렇�꾩썐 �깃났", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AuthLogoutPost200Response.class))
            }),
            @ApiResponse(responseCode = "401", description = "�몄쬆�섏� �딆� �ъ슜��", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth"),
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = AuthApi.PATH_AUTH_LOGOUT_POST,
        produces = { "application/json" }
    )
    
    default ResponseEntity<AuthLogoutPost200Response> authLogoutPost(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"濡쒓렇�꾩썐�섏뿀�듬땲��\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"details\" : \"{}\", \"error\" : \"error\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_AUTH_SIGNUP_POST = "/auth/signup";
    /**
     * POST /auth/signup : �뚯썝媛���
     * �덈줈�� �ъ슜�� 怨꾩젙�� �앹꽦�⑸땲��
     *
     * @param authSignupPostRequest  (required)
     * @return �뚯썝媛��� �깃났 (status code 201)
     *         or �섎せ�� �붿껌 (�대찓�� 以묐났, �좏슚�� 寃��� �ㅽ뙣 ��) (status code 400)
     *         or �대찓�� �먮뒗 �ъ슜�먮챸 以묐났 (status code 409)
     */
    @Operation(
        operationId = "authSignupPost",
        summary = "�뚯썝媛���",
        description = "�덈줈�� �ъ슜�� 怨꾩젙�� �앹꽦�⑸땲��",
        tags = { "Authentication" },
        responses = {
            @ApiResponse(responseCode = "201", description = "�뚯썝媛��� �깃났", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AuthSignupPost201Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "�섎せ�� �붿껌 (�대찓�� 以묐났, �좏슚�� 寃��� �ㅽ뙣 ��)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "409", description = "�대찓�� �먮뒗 �ъ슜�먮챸 以묐났", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = AuthApi.PATH_AUTH_SIGNUP_POST,
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<AuthSignupPost201Response> authSignupPost(
        @Parameter(name = "AuthSignupPostRequest", description = "", required = true) @Valid @RequestBody AuthSignupPostRequest authSignupPostRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"refresh_token\" : \"refresh_token\", \"user\" : { \"subscription_tier\" : \"free\", \"is_active\" : true, \"avatar_url\" : \"https://openapi-generator.tech\", \"updated_at\" : \"2000-01-23T04:56:07.000+00:00\", \"nickname\" : \"nickname\", \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"email\" : \"email\", \"username\" : \"username\" }, \"token\" : \"token\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"details\" : \"{}\", \"error\" : \"error\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"details\" : \"{}\", \"error\" : \"error\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
